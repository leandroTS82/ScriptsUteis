#!/bin/bash
#===================================================================================
# Script: git-push-script.sh
# 
# Descri√ß√£o:
#   Script para automatizar o processo de push no Git com verifica√ß√µes de seguran√ßa
#   e valida√ß√µes antes do push.
#
# Uso:
#   ./git-push-script.sh <caminho_do_projeto>
#
# Exemplo de execu√ß√£o:
#   ./git-push-script.sh /caminho/do/projeto
#
# Funcionalidades:
#   - Verifica se o diret√≥rio e o reposit√≥rio Git s√£o v√°lidos
#   - Mostra o status atual das altera√ß√µes
#   - Verifica se h√° conflitos
#   - Oferece op√ß√£o de pull antes do push
#   - Valida√ß√£o de credenciais
#
# Vers√£o: 1.0
#===================================================================================

# Recebe o caminho do projeto como vari√°vel
project_path=$1

# Fun√ß√£o para exibir mensagens de erro
error_exit() {
    echo "‚ùå Erro: $1"
    exit 1
}

# Fun√ß√£o para verificar se o Git est√° instalado
check_git_version() {
    if ! command -v git >/dev/null 2>&1; then
        error_exit "Git n√£o est√° instalado"
    fi
}

# Verifica se foi fornecido o caminho do projeto
if [ -z "$project_path" ]; then
    error_exit "Uso: $0 <caminho_do_projeto>"
fi

# Verifica se o diret√≥rio existe
if [ ! -d "$project_path" ]; then
    error_exit "Diret√≥rio $project_path n√£o existe"
fi

# Verifica se Git est√° instalado
check_git_version

# Entra no diret√≥rio do projeto
cd "$project_path" || error_exit "N√£o foi poss√≠vel acessar o diret√≥rio"

# Verifica se √© um reposit√≥rio git
if [ ! -d ".git" ]; then
    error_exit "$project_path n√£o √© um reposit√≥rio git"
fi

echo "üöÄ Trabalhando no projeto: $project_path"

# Obt√©m o nome da branch atual
current_branch=$(git rev-parse --abbrev-ref HEAD)
echo "üìÇ Branch atual: $current_branch"

# Verifica status do reposit√≥rio
echo -e "\nüìã Status atual do reposit√≥rio:"
git status

# Verifica se h√° altera√ß√µes para commit
if [ -n "$(git status --porcelain)" ]; then
    echo -e "\n‚ö†Ô∏è Existem altera√ß√µes n√£o commitadas!"
    read -p "Deseja fazer commit dessas altera√ß√µes? (s/n): " commit_resp
    
    if [[ $commit_resp == "s" ]]; then
        # Adiciona todas as altera√ß√µes
        git add .
        
        # Solicita mensagem do commit
        read -p "Digite a mensagem do commit: " commit_message
        
        # Realiza o commit
        if ! git commit -m "$commit_message"; then
            error_exit "Erro ao realizar commit"
        fi
        
        echo "‚úÖ Commit realizado com sucesso!"
    else
        error_exit "Opera√ß√£o cancelada - Commit as altera√ß√µes primeiro"
    fi
fi

# Verifica se h√° commits para push
local_commits=$(git log "origin/$current_branch..$current_branch" --oneline)
if [ -z "$local_commits" ]; then
    echo "‚ÑπÔ∏è N√£o h√° commits locais para push"
    exit 0
fi

# Mostra commits que ser√£o enviados
echo -e "\nüì¶ Commits que ser√£o enviados:"
echo "$local_commits"

# Oferece op√ß√£o de pull antes do push
read -p "Deseja fazer pull antes do push? (s/n): " pull_resp
if [[ $pull_resp == "s" ]]; then
    echo "üîÑ Realizando pull..."
    if ! git pull origin "$current_branch"; then
        error_exit "Erro durante o pull"
    fi
fi

# Confirma√ß√£o final
read -p "Deseja realizar o push? (s/n): " push_resp
if [[ $push_resp != "s" ]]; then
    echo "‚õî Opera√ß√£o cancelada"
    exit 0
fi

# Realiza o push
echo "üîÑ Realizando push..."
if ! git push origin "$current_branch"; then
    error_exit "Erro durante o push"
fi

echo "‚ú® Push realizado com sucesso!"

# Mostra status final
echo -e "\nüìã Status final:"
git status