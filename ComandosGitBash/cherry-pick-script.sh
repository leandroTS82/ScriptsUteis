#!/bin/bash
#===================================================================================
# Script: cherry-pick-script.sh
# 
# Descri√ß√£o:
#   Script para automatizar e tornar mais seguro o processo de cherry-pick no Git.
#   Realiza v√°rias verifica√ß√µes de seguran√ßa e oferece confirma√ß√µes antes de 
#   executar o cherry-pick, al√©m de lidar com commits de merge e conflitos.
#
# Uso:
#   ./cherry-pick-script.sh <caminho_do_projeto> <hash_do_commit>
#
# Exemplo de execu√ß√£o:
#   ./cherry-pick-script.sh /caminho/do/projeto abc123def456
#
# Funcionalidades:
#   - Verifica se o diret√≥rio e o reposit√≥rio Git s√£o v√°lidos
#   - Mostra detalhes do commit antes do cherry-pick
#   - Identifica se √© um commit de merge
#   - Verifica branches locais e remotas que cont√™m o commit
#   - Oferece op√ß√µes para lidar com conflitos e commits vazios
#   - Valida se o cherry-pick foi bem sucedido
#
# Autor: [Seu Nome]
# Data: [Data de Cria√ß√£o]
# Vers√£o: 1.4
#===================================================================================

# Recebe o caminho do projeto e o hash como vari√°veis
project_path=$1
hash=$2

# Fun√ß√£o para exibir mensagens de erro
error_exit() {
    echo "‚ùå Erro: $1"
    exit 1
}

# Fun√ß√£o para verificar se o Git est√° instalado e sua vers√£o
check_git_version() {
    if ! command -v git >/dev/null 2>&1; then
        error_exit "Git n√£o est√° instalado"
    fi
    
    required_git_version="2.0.0"
    git_version=$(git --version | cut -d' ' -f3)
    if ! [[ $(printf '%s\n' "$required_git_version" "$git_version" | sort -V | head -n1) = "$required_git_version" ]]; then
        error_exit "Git $required_git_version ou superior √© necess√°rio"
    fi
}

# Fun√ß√£o de limpeza
cleanup() {
    if [ -n "$(git status --porcelain)" ]; then
        echo "üßπ Limpando estado do reposit√≥rio..."
        git cherry-pick --abort 2>/dev/null
        git stash pop 2>/dev/null
    fi
}

# Configurar trap para SIGINT e SIGTERM
trap 'echo "‚ö†Ô∏è Script interrompido"; cleanup; exit 1' INT TERM

# Verifica se foram fornecidos os argumentos necess√°rios
if [ -z "$project_path" ] || [ -z "$hash" ]; then
    error_exit "Uso: $0 <caminho_do_projeto> <hash>"
fi

# Verifica se o diret√≥rio existe
if [ ! -d "$project_path" ]; then
    error_exit "Diret√≥rio $project_path n√£o existe"
fi

# Verifica vers√£o do Git
check_git_version

# Entra no diret√≥rio do projeto
cd "$project_path" || error_exit "N√£o foi poss√≠vel acessar o diret√≥rio"

# Verifica se √© um reposit√≥rio git
if [ ! -d ".git" ]; then
    error_exit "$project_path n√£o √© um reposit√≥rio git"
fi

# Verifica se o hash √© v√°lido
if ! git cat-file -e "$hash^{commit}" 2>/dev/null; then
    error_exit "Hash $hash n√£o √© v√°lido"
fi

# Verifica se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD --; then
    echo "‚ö†Ô∏è Existem mudan√ßas n√£o commitadas no reposit√≥rio"
    read -p "Deseja fazer stash das mudan√ßas antes de continuar? (s/n): " resposta
    if [[ $resposta == "s" ]]; then
        git stash save "Backup antes do cherry-pick de $hash"
    else
        error_exit "Opera√ß√£o cancelada - Commit ou stash das mudan√ßas primeiro"
    fi
fi

echo "üöÄ Trabalhando no projeto: $project_path"

# Fun√ß√£o para verificar branches que cont√™m o commit
check_branches() {
    local hash=$1
    
    echo -e "\n=== Branches Locais que cont√™m o commit ==="
    git branch --contains $hash
    
    echo -e "\n=== Branches Remotas que cont√™m o commit ==="
    git branch -r --contains $hash
    
    # Verifica se o commit est√° em alguma branch importante
    if git branch --contains $hash | grep -q "main\|master\|develop"; then
        echo -e "\n‚ö†Ô∏è  ATEN√á√ÉO: Este commit est√° presente em branches principais!"
    fi
    
    if git branch -r --contains $hash | grep -q "origin/main\|origin/master\|origin/develop"; then
        echo -e "\n‚ö†Ô∏è  ATEN√á√ÉO: Este commit est√° presente em branches principais remotas!"
    fi
}

# Fun√ß√£o para lidar com cherry-pick em andamento
handle_ongoing_cherry_pick() {
    echo "üîÑ Detectado cherry-pick em andamento..."
    
    # Verifica status do cherry-pick
    status_output=$(git status)
    
    if echo "$status_output" | grep -q "all conflicts fixed"; then
        echo "‚úÖ Todos os conflitos foram resolvidos."
        echo "Op√ß√µes:"
        echo "1. Continuar com cherry-pick (git cherry-pick --continue)"
        echo "2. Pular este commit (git cherry-pick --skip)"
        echo "3. Abortar cherry-pick"
        read -p "Escolha uma op√ß√£o (1/2/3): " opcao
        
        case $opcao in
            1)
                if git cherry-pick --continue; then
                    echo "‚úÖ Cherry-pick continuado com sucesso!"
                    return 0
                else
                    error_exit "Erro ao continuar o cherry-pick"
                fi
                ;;
            2)
                git cherry-pick --skip
                echo "‚è≠Ô∏è Cherry-pick pulado"
                return 0
                ;;
            3)
                git cherry-pick --abort
                echo "‚õî Cherry-pick abortado"
                return 1
                ;;
            *)
                error_exit "Op√ß√£o inv√°lida"
                ;;
        esac
    elif echo "$status_output" | grep -q "cherry-pick is now empty"; then
        echo "‚ÑπÔ∏è O cherry-pick resultou em um commit vazio"
        echo "Op√ß√µes:"
        echo "1. Criar commit vazio (git commit --allow-empty)"
        echo "2. Pular este commit (git cherry-pick --skip)"
        echo "3. Abortar cherry-pick"
        read -p "Escolha uma op√ß√£o (1/2/3): " opcao
        
        case $opcao in
            1)
                git commit --allow-empty -C "$hash"
                echo "‚úÖ Commit vazio criado"
                return 0
                ;;
            2)
                git cherry-pick --skip
                echo "‚è≠Ô∏è Cherry-pick pulado"
                return 0
                ;;
            3)
                git cherry-pick --abort
                echo "‚õî Cherry-pick abortado"
                return 1
                ;;
            *)
                error_exit "Op√ß√£o inv√°lida"
                ;;
        esac
    else
        echo "‚ö†Ô∏è Existem conflitos n√£o resolvidos"
        return 1
    fi
}

# Fun√ß√£o para lidar com o cherry-pick
do_cherry_pick() {
    local hash=$1
    local is_merge=$2
    
    # Verifica se h√° um cherry-pick em andamento
    if [ -f ".git/CHERRY_PICK_HEAD" ]; then
        handle_ongoing_cherry_pick
        return $?
    fi
    
    # Faz backup do estado atual
    echo "üì¶ Criando backup do estado atual..."
    git stash save "Backup antes do cherry-pick de $hash" >/dev/null 2>&1
    
    echo "üîÑ Iniciando cherry-pick..."
    if [ $is_merge -gt 1 ]; then
        git cherry-pick -m 1 $hash
    else
        git cherry-pick $hash
    fi
    
    # Captura a sa√≠da do status
    status_output=$(git status)
    
    # Verifica diferentes cen√°rios
    if echo "$status_output" | grep -q "nothing to commit, working tree clean"; then
        if echo "$status_output" | grep -q "previous cherry-pick is now empty"; then
            echo "‚ÑπÔ∏è O cherry-pick resultou em um commit vazio"
            echo "Op√ß√µes:"
            echo "1. Criar commit vazio (git commit --allow-empty)"
            echo "2. Pular este commit (git cherry-pick --skip)"
            echo "3. Abortar cherry-pick"
            read -p "Escolha uma op√ß√£o (1/2/3): " opcao
            
            case $opcao in
                1)
                    git commit --allow-empty -C "$hash"
                    echo "‚úÖ Commit vazio criado"
                    return 0
                    ;;
                2)
                    git cherry-pick --skip
                    echo "‚è≠Ô∏è Cherry-pick pulado"
                    return 0
                    ;;
                3)
                    git cherry-pick --abort
                    git stash pop >/dev/null 2>&1
                    echo "‚õî Cherry-pick abortado"
                    return 1
                    ;;
                *)
                    error_exit "Op√ß√£o inv√°lida"
                    ;;
            esac
        else
            echo "‚úÖ Cherry-pick realizado com sucesso!"
            return 0
        fi
    elif echo "$status_output" | grep -q "fix conflicts"; then
        echo "‚ö†Ô∏è CONFLITO detectado durante o cherry-pick!"
        echo "Op√ß√µes:"
        echo "1. Resolver conflitos manualmente"
        echo "2. Abortar cherry-pick e restaurar backup"
        read -p "Escolha uma op√ß√£o (1/2): " opcao
        
        case $opcao in
            1)
                echo "üîß Por favor, resolva os conflitos manualmente."
                echo "Ap√≥s resolver, execute:"
                echo "git add ."
                echo "git cherry-pick --continue"
                echo "Script interrompido para resolu√ß√£o manual."
                exit 1
                ;;
            2)
                git cherry-pick --abort
                git stash pop >/dev/null 2>&1
                echo "‚õî Cherry-pick abortado e backup restaurado"
                exit 1
                ;;
            *)
                git cherry-pick --abort
                git stash pop >/dev/null 2>&1
                error_exit "Op√ß√£o inv√°lida"
                ;;
        esac
    fi
}

# Atualiza a lista de branches remotas
echo "üîÑ Atualizando informa√ß√µes das branches remotas..."
git fetch --all

# Mostra o commit
echo -e "\nüìÑ Exibindo detalhes do commit..."
git show $hash

# Pede confirma√ß√£o para continuar
read -p "Deseja continuar? (s/n): " resposta
if [[ $resposta != "s" ]]; then
    echo "‚õî Opera√ß√£o cancelada"
    exit 0
fi

# Verifica as branches que cont√™m o commit
echo -e "\nüîç Verificando branches que cont√™m o commit..."
check_branches $hash

# Pede confirma√ß√£o novamente
read -p "Deseja continuar com o cherry-pick? (s/n): " resposta
if [[ $resposta != "s" ]]; then
    echo "‚õî Opera√ß√£o cancelada"
    exit 0
fi

# Verifica se √© um commit de merge
is_merge=$(git cat-file -p $hash | grep -c "^parent ")
if [ $is_merge -gt 1 ]; then
    echo "‚ö†Ô∏è ATEN√á√ÉO: Este √© um commit de merge!"
    echo "Detalhes do merge:"
    git show --format="%h %s" $hash
    
    read -p "Deseja realizar o cherry-pick mesmo assim? (s/n): " resposta
    if [[ $resposta == "s" ]]; then
        echo "üîÑ Realizando cherry-pick do merge commit..."
        do_cherry_pick $hash $is_merge
    else
        echo "‚õî Opera√ß√£o cancelada"
        exit 0
    fi
else
    echo "üîÑ Realizando cherry-pick..."
    do_cherry_pick $hash $is_merge
fi

echo "‚ú® Processo conclu√≠do!"